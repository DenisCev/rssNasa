//
//  ListRssPresenter.swift
//  rssNasa
//
//  Created by Pablo Vélez  on 27/11/2018.
//  Copyright (c) 2018 Denis. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import Alamofire

final class ListRssPresenter {

    // MARK: - Private properties -

    private unowned var _view: ListRssViewInterface
    private var _interactor: ListRssInteractorInterface
    private var _wireframe: ListRssWireframeInterface
    
    fileprivate var _items: [Item] = [] {
        didSet {
            _view.reloadData()
        }
    }

    // MARK: - Lifecycle -

    init(wireframe: ListRssWireframeInterface, view: ListRssViewInterface, interactor: ListRssInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension ListRssPresenter: ListRssPresenterInterface {
    func startFetchData() {
        _interactor.getListRSS() { [weak self] (response) -> (Void) in
            self?._handleListRSS(response.result)
        }
    }
    
    func viewDidLoad() {
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOfItems(in section: Int) -> Int {
        return _items.count
    }
    
    func item(at indexPath: IndexPath) -> Item {
        return _items[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        //let result = _items[indexPath.row]
        //_wireframe.navigate(to: .details(result))
    }
    
    private func _handleListRSS(_ result: Result<RSS>) {
        switch result {
        case .success(let listRSSObject):
            _items = (listRSSObject.channel?.item)!

        case .failure(let error):
            _wireframe.showErrorAlert(with: error.message)
        }
    }
}
